/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 /Users/liamylehr/Documents/projects/react/r3f-portfolio-animations/public/models/6761050247bcd719ae0dd2b1.glb 
*/

import React from 'react'
import { useGraph } from '@react-three/fiber'
import { useAnimations, useFBX, useGLTF } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'
import { useEffect, useRef } from 'react'
import { AxesHelper } from 'three';

export default function Character({animation}, props) {
    const group = React.useRef();
    // XXX - (needs testing) has mounted should be used to ensure that the initial position and rotation are set only once to fix animation glitch
    const hasMounted = useRef(false);

    const { scene } = useGLTF('models/6761050247bcd719ae0dd2b1.glb')
    const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
    const { nodes, materials } = useGraph(clone)

    // initialize animations
    const {animations: breathingIdle} = useFBX('animations/BreathingIdle.fbx');
    breathingIdle[0].name = "BreathingIdle";
    // foward
    const {animations: forwardWalk} = useFBX('animations/ForwardWalk.fbx');
    forwardWalk[0].name = "ForwardWalk";
    const {animations: run} = useFBX('animations/Run.fbx');
    run[0].name = "Run";
    // backward
    const {animations: backwardWalk} = useFBX('animations/BackwardWalk.fbx');
    backwardWalk[0].name = "BackwardWalk";
    const {animations: moonWalk} = useFBX('animations/MoonWalk.fbx');
    moonWalk[0].name = "MoonWalk";
    // turns
    const {animations: leftTurn} = useFBX('animations/LeftTurn.fbx');
    leftTurn[0].name = "LeftTurn";
    const {animations: rightTurn} = useFBX('animations/RightTurn.fbx');
    rightTurn[0].name = "RightTurn";

    const animationMap = new Map([
        ['BreathingIdle', breathingIdle],
        ['ForwardWalk', forwardWalk],
        ['Run', run],
        ['BackwardWalk', backwardWalk],
        ['MoonWalk', moonWalk],
        ['LeftTurn', leftTurn],
        ['RightTurn', rightTurn]
    ]);
    console.log("animation: "+ animation);

    let currAnimation = animationMap.get(animation);
    const { actions } = useAnimations(currAnimation, group);
    const currentAction = useRef(null);

    useEffect(() => {
        if (currentAction.current) {
            currentAction.current.play();
            currentAction.current.crossFadeTo(actions[animation], .5);
        }
        actions[animation].play();
        currentAction.current = actions[animation];
    }, [animation]);

    // // helps better visualize the orientation of the model by showing the x, y, and z axes
    // useEffect(() => {
    //     const axesHelper = new AxesHelper(5);
    //     group.current.add(axesHelper);
    // }, []);

    // Set initial position and rotation
    useEffect(() => {
        if (!hasMounted.current && group.current) {
            group.current.position.set(0, 0, 0); // Adjust the position as needed
            group.current.rotation.set(-Math.PI/2, 0, 0); // Ensure the character is upright
            hasMounted.current = true;
        }
    }, []);

    return (
        <group {...props} ref={group} dispose={null} position={[0, 0, 0]}>
            <group>
                <primitive object={nodes.Hips} />
                <skinnedMesh castShadow geometry={nodes.Wolf3D_Outfit_Top.geometry} material={materials.Wolf3D_Outfit_Top} skeleton={nodes.Wolf3D_Outfit_Top.skeleton} />
                <skinnedMesh castShadow geometry={nodes.Wolf3D_Outfit_Bottom.geometry} material={materials.Wolf3D_Outfit_Bottom} skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton} />
                <skinnedMesh castShadow geometry={nodes.Wolf3D_Outfit_Footwear.geometry} material={materials.Wolf3D_Outfit_Footwear} skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton} />
                <skinnedMesh castShadow geometry={nodes.Wolf3D_Body.geometry} material={materials.Wolf3D_Body} skeleton={nodes.Wolf3D_Body.skeleton} />
                <skinnedMesh castShadow name="EyeLeft" geometry={nodes.EyeLeft.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeLeft.skeleton} morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary} morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences} />
                <skinnedMesh castShadow name="EyeRight" geometry={nodes.EyeRight.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeRight.skeleton} morphTargetDictionary={nodes.EyeRight.morphTargetDictionary} morphTargetInfluences={nodes.EyeRight.morphTargetInfluences} />
                <skinnedMesh castShadow name="Wolf3D_Head" geometry={nodes.Wolf3D_Head.geometry} material={materials.Wolf3D_Skin} skeleton={nodes.Wolf3D_Head.skeleton} morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences} />
                <skinnedMesh castShadow name="Wolf3D_Teeth" geometry={nodes.Wolf3D_Teeth.geometry} material={materials.Wolf3D_Teeth} skeleton={nodes.Wolf3D_Teeth.skeleton} morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences} />
            </group>
        </group>
    )
}

useGLTF.preload('models/6761050247bcd719ae0dd2b1.glb')
